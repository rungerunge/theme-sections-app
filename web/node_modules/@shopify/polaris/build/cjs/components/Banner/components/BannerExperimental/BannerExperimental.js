'use strict';

var React = require('react');
var breakpoints = require('../../../../utilities/breakpoints.js');
var withinContentContext = require('../../../../utilities/within-content-context.js');
var utilities = require('./utilities.js');
var hooks = require('../../../../utilities/i18n/hooks.js');
var Button = require('../../../Button/Button.js');
var ButtonGroup = require('../../../ButtonGroup/ButtonGroup.js');
var Box = require('../../../Box/Box.js');
var VerticalStack = require('../../../VerticalStack/VerticalStack.js');
var HorizontalStack = require('../../../HorizontalStack/HorizontalStack.js');
var Icon = require('../../../Icon/Icon.js');
var Text = require('../../../Text/Text.js');

function BannerExperimental({
  status = 'info',
  icon,
  hideIcon,
  onDismiss,
  action,
  secondaryAction,
  title,
  children
}) {
  const i18n = hooks.useI18n();
  const withinContentContainer = React.useContext(withinContentContext.WithinContentContext);
  const isNoTitleBanner = !title && !withinContentContainer;
  const {
    iconRGBA,
    backgroundColor,
    textColor,
    statusIcon,
    closeIcon
  } = utilities.useBannerColors(status, isNoTitleBanner);
  const bannerIcon = hideIcon ? null : /*#__PURE__*/React.createElement(Box.Box, {
    paddingInlineStart: isNoTitleBanner ? '0' : '05'
  }, icon ? /*#__PURE__*/React.createElement("span", {
    style: {
      fill: iconRGBA
    }
  }, /*#__PURE__*/React.createElement(Icon.Icon, {
    source: icon
  })) : /*#__PURE__*/React.createElement(Icon.Icon, {
    source: statusIcon
  }));
  const dismissButton = onDismiss ? /*#__PURE__*/React.createElement(Button.Button, {
    plain: true,
    icon: closeIcon,
    onClick: onDismiss,
    accessibilityLabel: i18n.translate('Polaris.Banner.dismissButton')
  }) : null;
  const actionButtons = action || secondaryAction ? /*#__PURE__*/React.createElement(ButtonGroup.ButtonGroup, null, action && /*#__PURE__*/React.createElement(Button.Button, Object.assign({
    onClick: action.onAction
  }, action), action.content), secondaryAction && /*#__PURE__*/React.createElement(Button.Button, Object.assign({
    onClick: secondaryAction.onAction
  }, secondaryAction), secondaryAction.content)) : null;
  const bannerTitle = title ? /*#__PURE__*/React.createElement(Text.Text, {
    as: "h2",
    variant: "headingSm",
    breakWord: true
  }, title) : null;
  const bannerLayoutProps = {
    onDismiss,
    backgroundColor,
    textColor,
    bannerTitle,
    bannerIcon,
    actionButtons,
    dismissButton
  };
  if (withinContentContainer) {
    return /*#__PURE__*/React.createElement(WithinContentContainerBanner, bannerLayoutProps, children);
  }
  if (isNoTitleBanner) {
    return /*#__PURE__*/React.createElement(NoTitleBanner, bannerLayoutProps, children);
  }
  return /*#__PURE__*/React.createElement(DefaultBanner, bannerLayoutProps, children);
}
function DefaultBanner({
  backgroundColor,
  textColor,
  bannerTitle,
  bannerIcon,
  actionButtons,
  dismissButton,
  children
}) {
  const {
    smUp
  } = breakpoints.useBreakpoints();
  const hasContent = children || actionButtons;
  return /*#__PURE__*/React.createElement(Box.Box, {
    width: "100%"
  }, /*#__PURE__*/React.createElement(VerticalStack.VerticalStack, {
    align: "space-between"
  }, /*#__PURE__*/React.createElement(Box.Box, {
    background: backgroundColor,
    color: textColor,
    borderRadiusStartStart: smUp ? '2' : undefined,
    borderRadiusStartEnd: smUp ? '2' : undefined,
    borderRadiusEndStart: !hasContent && smUp ? '2' : undefined,
    borderRadiusEndEnd: !hasContent && smUp ? '2' : undefined,
    padding: {
      xs: '2',
      md: '3'
    },
    paddingInlineEnd: {
      xs: '3',
      md: '4'
    }
  }, /*#__PURE__*/React.createElement(HorizontalStack.HorizontalStack, {
    align: "space-between",
    blockAlign: "center",
    gap: "2",
    wrap: false
  }, /*#__PURE__*/React.createElement(HorizontalStack.HorizontalStack, {
    gap: "2",
    wrap: false
  }, bannerIcon, bannerTitle), dismissButton)), hasContent && /*#__PURE__*/React.createElement(Box.Box, {
    padding: {
      xs: '3',
      md: '4'
    },
    paddingBlockStart: "3"
  }, /*#__PURE__*/React.createElement(VerticalStack.VerticalStack, {
    gap: "2"
  }, /*#__PURE__*/React.createElement("div", null, children), actionButtons))));
}
function NoTitleBanner({
  onDismiss,
  backgroundColor,
  bannerIcon,
  actionButtons,
  dismissButton,
  children
}) {
  const [blockAlign, setBlockAlign] = React.useState('center');
  const contentNode = React.useRef(null);
  const iconNode = React.useRef(null);
  const handleResize = React.useCallback(() => {
    const contentHeight = contentNode?.current?.offsetHeight;
    const iconBoxHeight = iconNode?.current?.offsetHeight;
    if (!contentHeight || !iconBoxHeight) return;
    if (contentHeight > iconBoxHeight) {
      setBlockAlign('start');
    } else {
      setBlockAlign('center');
    }
  }, []);
  React.useEffect(() => handleResize(), [handleResize]);
  React.useEffect(() => {
    if (!contentNode.current) return;
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, [handleResize]);
  return /*#__PURE__*/React.createElement(Box.Box, {
    width: "100%",
    padding: "3",
    paddingInlineStart: {
      xs: '2',
      md: '3'
    },
    borderRadius: "2"
  }, /*#__PURE__*/React.createElement(HorizontalStack.HorizontalStack, {
    align: "space-between",
    blockAlign: "start",
    wrap: false
  }, /*#__PURE__*/React.createElement(Box.Box, {
    paddingInlineEnd: onDismiss ? '2' : undefined
  }, /*#__PURE__*/React.createElement(HorizontalStack.HorizontalStack, {
    gap: "2",
    wrap: false,
    blockAlign: blockAlign
  }, /*#__PURE__*/React.createElement("div", {
    ref: iconNode
  }, /*#__PURE__*/React.createElement(Box.Box, {
    background: backgroundColor,
    borderRadius: "2",
    padding: "1"
  }, bannerIcon)), /*#__PURE__*/React.createElement("div", {
    ref: contentNode
  }, /*#__PURE__*/React.createElement(VerticalStack.VerticalStack, {
    gap: "2"
  }, /*#__PURE__*/React.createElement("div", null, children), actionButtons)))), dismissButton));
}
function WithinContentContainerBanner({
  onDismiss,
  backgroundColor,
  textColor,
  bannerTitle,
  bannerIcon,
  actionButtons,
  dismissButton,
  children
}) {
  return /*#__PURE__*/React.createElement(Box.Box, {
    width: "100%",
    background: backgroundColor,
    padding: "2",
    borderRadius: "2",
    color: textColor
  }, /*#__PURE__*/React.createElement(HorizontalStack.HorizontalStack, {
    align: "space-between",
    blockAlign: "start",
    wrap: false
  }, /*#__PURE__*/React.createElement(Box.Box, {
    paddingInlineEnd: onDismiss ? '2' : undefined
  }, /*#__PURE__*/React.createElement(HorizontalStack.HorizontalStack, {
    gap: "2",
    wrap: false
  }, bannerIcon, /*#__PURE__*/React.createElement(VerticalStack.VerticalStack, {
    gap: "2"
  }, /*#__PURE__*/React.createElement(VerticalStack.VerticalStack, {
    gap: "05"
  }, bannerTitle, /*#__PURE__*/React.createElement("div", null, children)), actionButtons))), /*#__PURE__*/React.createElement(Box.Box, {
    padding: "1"
  }, dismissButton)));
}

exports.BannerExperimental = BannerExperimental;
