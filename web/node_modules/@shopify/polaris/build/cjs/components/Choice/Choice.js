'use strict';

var React = require('react');
var css = require('../../utilities/css.js');
var Choice$1 = require('./Choice.scss.js');
var hooks = require('../../utilities/features/hooks.js');
var Text = require('../Text/Text.js');
var InlineError = require('../InlineError/InlineError.js');

function Choice({
  id,
  label,
  disabled,
  error,
  children,
  labelHidden,
  helpText,
  onClick,
  onMouseOut,
  onMouseOver
}) {
  const {
    polarisSummerEditions2023
  } = hooks.useFeatures();
  const className = css.classNames(Choice$1.default.Choice, labelHidden && Choice$1.default.labelHidden, disabled && Choice$1.default.disabled);
  const labelMarkup = /*#__PURE__*/React.createElement("label", {
    className: className,
    htmlFor: id,
    onClick: onClick,
    onMouseOver: onMouseOver,
    onMouseOut: onMouseOut
  }, /*#__PURE__*/React.createElement("span", {
    className: Choice$1.default.Control
  }, children), /*#__PURE__*/React.createElement("span", {
    className: Choice$1.default.Label
  }, /*#__PURE__*/React.createElement("span", null, label)));
  const helpTextMarkup = helpText ? /*#__PURE__*/React.createElement("div", {
    className: Choice$1.default.HelpText,
    id: helpTextID(id)
  }, /*#__PURE__*/React.createElement(Text.Text, {
    as: "span"
    // `undefined` means color: inherit
    // the nearest ancestor with a specified color is .Descriptions in Choice.scss
    ,
    color: disabled && polarisSummerEditions2023 ? undefined : 'subdued'
  }, helpText)) : null;
  const errorMarkup = error && typeof error !== 'boolean' && /*#__PURE__*/React.createElement("div", {
    className: Choice$1.default.Error
  }, /*#__PURE__*/React.createElement(InlineError.InlineError, {
    message: error,
    fieldID: id
  }));
  const descriptionMarkup = helpTextMarkup || errorMarkup ? /*#__PURE__*/React.createElement("div", {
    className: Choice$1.default.Descriptions
  }, errorMarkup, helpTextMarkup) : null;
  return descriptionMarkup ? /*#__PURE__*/React.createElement("div", null, labelMarkup, descriptionMarkup) : labelMarkup;
}
function helpTextID(id) {
  return `${id}HelpText`;
}

exports.Choice = Choice;
exports.helpTextID = helpTextID;
